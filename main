/* mbed Microcontroller Library
* Copyright (c) 2019 ARM Limited
* SPDX-License-Identifier: Apache-2.0
*/
#include "mbed.h"
#include <cstdio>
#include <iostream>
AnalogIn LightSensor(PA_0); //CN8/A0
AnalogIn TemperatureSensor(PA_1); //CN8/A1
AnalogIn TorqueSensor(PC_1); //CN8/A4
InterruptIn START_BUTTON(PB_5); //CN5/D4
InterruptIn STOP_BUTTON(PA_10); //CN5/D2
DigitalOut OUTPUT(PB_4); //CN9/D5
#define Vsupply 3.3f //microcontroller voltage supply 3.3V
//variables for light sensor
float LightSensorDigiValue; //the A/D converter value read by the controller input pin
float LightSensorVoltValue; //voltage on the controller input pin
float LdrResistance; //photoresistance value
#define LdrBiasResistor 3300.0f //Bias resistor (upper leg of voltage divider) for LDR
//variables for temperature sensor
float TemperatureSensorDigiValue; //the A/D converter value read by the controller input pin
float TemperatureSensorVoltValue; //the voltage on the controller input pin (across the 10k resistor) from the temperature sensor voltage
divider
float ThermistorResistance; //computed from the voltage drop value across the thermistor
float ThermistorTemperature; //approximate ambient temperature measured by thermistor
#define ThermistorBiasResistor 10000.0f //Bias resistor (lower leg of voltage divider) for thermistor
//variables for torque sensor
float MotorCurrentDigiValue; //the A/D converter value ready by the controller input pin
float MotorCurrentVoltValue; //the voltage on the controller input pin (across the 10 ohm resistor) from the motor torque sensor
float MotorCurrent; //computed from the voltage value
#define MotorSeriesResistance 10.0f //resistance of torque (current) sensing resistor in series with the Motor
// Variables to hold control reference values.
// STUDENT: EDIT THESE VALUES
float LightResistanceLimit = 500 ; //enter a resistance reference for LDR load activation
float TemperatureLimit = 27; //enter a temperature in Celsius here for temperature deactivation; NOTE: room temperature is 25C
float MotorCurrentLimit = 5; //enter a reference current in amperes for motor torque deactivation
// This function will be attached to the start button interrupt.
void StartPressed(void)
{
cout << "Start!" << endl;
OUTPUT = 1;
}
// This function will be attached to the stop button interrupt.
void StopPressed(void)
{
// STUDENT: EDIT HERE
}
//convert the input voltage from the light sensor to an LDR resistance value
//Resistance is inversely proportional to the amount of light
float getPhotoResistance(void)
{
LightSensorDigiValue = LightSensor.read();
LightSensorVoltValue = Vsupply*LightSensorDigiValue;
LdrResistance = LightSensorVoltValue*LdrBiasResistor/(Vsupply - LightSensorVoltValue); //voltage divider equation to determine LDR
resistance
return LdrResistance;
}
// This function will check the LDR analog input.
// STUDENT: USE THIS AS AN EXAMPLE FOR THE TEMPERATURE AND TORQUE CHECK FUNCTIONS
void CheckLightSensor(void)
{
if(getPhotoResistance() >= LightResistanceLimit) {
cout << "LDR Start!" << endl;
OUTPUT = 1;
}
else {
}
}
// This function converts the voltage value from the thermistor input to an approximate temperature
// in Celsius based on a linear approximation of the thermistor.
float getThermistorTemperature(void)
{
// STUDENT: EDIT HERE
// 1. Read the TemperatureSensor A/D value and store it in TemperatureSensorDigiValue
// 2. Calculate TemperatureSensorVoltValue from TemperatureSensorDigiValue and Vsupply
// 3. Calculate ThermistorResistance using the voltage divider equation
ThermistorTemperature = ((ThermistorResistance - 10000.0)/(-320.0)) + 25.0; //temperature of the thermistor computed by a linear
approximation of the device response
return ThermistorTemperature;
}
//This function will check for a temperature triggered deactivation of the motor
void CheckTemperatureSensor(void)
{
// STUDENT: EDIT HERE
// Use the getThermistorTemperature() function defined above to obtain a temperature value to use for comparison and decision making with
your TemperatureLimit
}
//This function will determine the motor current in amperes
float getMotorCurrent(void)
{
// STUDENT: EDIT HERE
// 1. Read the TorqueSensor value and store it in MotorCurrentDigiValue
// 2. Calculate MotorCurrentVoltValue from MotorCurrentDigiValue and Vsupply
// 3. Calculate MotorCurrent using Ohm's law from MotorCurrentVoltValue and MotorSeriesResistance
return MotorCurrent;
}
// This function will check the Over Torque analog input.
void CheckTorqueSensor(void)
{
// STUDENT: EDIT HERE
// Use the getMotorCurrent() function defined above to obtain a current torque value to use for comparison and decision making with your
MotorCurrentLimit
}
// Standard entry point in C++.
int main(void)
{
// Setup an event queue to handle event requests for the ISR
// and issue the callback in the event thread.
EventQueue event_queue;
// Setup a event thread to update the motor
Thread event_thread(osPriorityNormal);
// Start the event on a loop ready to receive event calls from
// the event queue
event_thread.start(callback(&event_queue, &EventQueue::dispatch_forever));
// Attach the functions to the hardware interrupt pins to be inserted into
// the event queue and exicuted on button press.
START_BUTTON.rise(event_queue.event(&StartPressed));
STOP_BUTTON.rise(event_queue.event(&StopPressed));
while(true) {
// Check the analog inputs.
CheckLightSensor();
CheckTemperatureSensor();
CheckTorqueSensor();
// Print Analog Values to screen
cout<< "\n\rLDR Resistance: " << getPhotoResistance() << endl;
cout << "\rCurrent Temperature Value: " << getThermistorTemperature() << endl;
cout << "\rMotor Current: " << getMotorCurrent() << endl;
cout << "\rStart Button: " << START_BUTTON.read() << endl;
cout << "\rStop Button: " << STOP_BUTTON.read() << endl;
wait_us(1000000); // Wait 1 second before repeating the loop.
}
}
// End of HardwareInterruptSeedCode
