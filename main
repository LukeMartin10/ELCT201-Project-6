#include "mbed.h"
#include <cstdio>
#include <iostream>

AnalogIn LightSensor(PA_0);
AnalogIn TemperatureSensor(PA_1);
AnalogIn TorqueSensor(PC_1);

InterruptIn START_BUTTON(PB_5);
InterruptIn STOP_BUTTON(PA_10);

DigitalOut OUTPUT(PB_4);

#define Vsupply 3.3f
#define LdrBiasResistor 10000.0f
#define ThermistorBiasResistor 10000.0f
#define MotorSeriesResistance 10.0f

float LightSensorDigiValue;
float LightSensorVoltValue;
float LdrResistance;

float TemperatureSensorDigiValue;
float TemperatureSensorVoltValue;
float ThermistorResistance;
float ThermistorTemperature;

float MotorCurrentDigiValue;
float MotorCurrentVoltValue;
float MotorCurrent;

float LightResistanceLimit = 10000;
float TemperatureLimit = 27;
float MotorCurrentLimit = 0.15;

void StartPressed(void) {
    cout << "Start!" << endl;
    OUTPUT = 1;
}

void StopPressed(void) {
    cout << "Stop!" << endl;
    OUTPUT = 0;
}

float getPhotoResistance(void) {
    LightSensorDigiValue = LightSensor.read();
    LightSensorVoltValue = Vsupply * LightSensorDigiValue;
    LdrResistance = LightSensorVoltValue * LdrBiasResistor / (Vsupply - LightSensorVoltValue);
    return LdrResistance;
}

void CheckLightSensor(void) {
    if (getPhotoResistance() >= LightResistanceLimit) {
        cout << "LDR Start!" << endl;
        OUTPUT = 1;
    }
}

float getThermistorTemperature(void) {
    TemperatureSensorDigiValue = TemperatureSensor.read();
    TemperatureSensorVoltValue = Vsupply * TemperatureSensorDigiValue;
    ThermistorResistance = (Vsupply * ThermistorBiasResistor / TemperatureSensorVoltValue) - ThermistorBiasResistor;
    ThermistorTemperature = ((ThermistorResistance - 10000.0) / (-320.0)) + 25.0;
    return ThermistorTemperature;
}

void CheckTemperatureSensor(void) {
    if (getThermistorTemperature() >= TemperatureLimit) {
        cout << "Temperature Limit Exceeded!" << endl;
        OUTPUT = 0;
    }
}

float getMotorCurrent(void) {
    MotorCurrentDigiValue = TorqueSensor.read();
    MotorCurrentVoltValue = Vsupply * MotorCurrentDigiValue;
    MotorCurrent = MotorCurrentVoltValue / MotorSeriesResistance;
    return MotorCurrent;
}

void CheckTorqueSensor(void) {
    if (getMotorCurrent() >= MotorCurrentLimit) {
        cout << "Over Torque Condition!" << endl;
        OUTPUT = 0;
    }
}

int main(void) {
    EventQueue event_queue;
    Thread event_thread(osPriorityNormal);
    event_thread.start(callback(&event_queue, &EventQueue::dispatch_forever));

    START_BUTTON.rise(event_queue.event(&StartPressed));
    STOP_BUTTON.rise(event_queue.event(&StopPressed));

    while (true) {
        CheckLightSensor();
        CheckTemperatureSensor();
        CheckTorqueSensor();

        cout << "\n\rLDR Resistance: " << getPhotoResistance() << " Ohms" << endl;
        cout << "\rCurrent Temperature: " << getThermistorTemperature() << "Â°C" << endl;
        cout << "\rMotor Current: " << getMotorCurrent() << " A" << endl;
        cout << "\rStart Button: " << START_BUTTON.read() << endl;
        cout << "\rStop Button: " << STOP_BUTTON.read() << endl;

        wait_us(1000000);
    }
}
