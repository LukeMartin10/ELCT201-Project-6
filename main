/* mbed Microcontroller Library
* Copyright (c) 2019 ARM Limited
* SPDX-License-Identifier: Apache-2.0
*/
#include "mbed.h"
#include <cstdio>
#include <iostream>

AnalogIn LightSensor(PA_0); //CN8/A0
AnalogIn TemperatureSensor(PA_1); //CN8/A1
AnalogIn TorqueSensor(PC_1); //CN8/A4

InterruptIn START_BUTTON(PB_5); //CN5/D4
InterruptIn STOP_BUTTON(PA_10); //CN5/D2
DigitalOut OUTPUT(PB_4); //CN9/D5

#define Vsupply 3.3f //microcontroller voltage supply 3.3V

// Variables for light sensor
float LightSensorDigiValue; 
float LightSensorVoltValue; 
float LdrResistance; 
#define LdrBiasResistor 3300.0f 

// Variables for temperature sensor
float TemperatureSensorDigiValue; 
float TemperatureSensorVoltValue; 
float ThermistorResistance; 
float ThermistorTemperature; 
#define ThermistorBiasResistor 10000.0f 

// Variables for torque sensor
float MotorCurrentDigiValue; 
float MotorCurrentVoltValue; 
float MotorCurrent; 
#define MotorSeriesResistance 10.0f 

// Control reference values
float LightResistanceLimit = 500; // LDR activation resistance threshold
float TemperatureLimit = 27; // Temperature threshold for deactivation
float MotorCurrentLimit = 5; // Torque threshold for deactivation

// Start button function
void StartPressed(void)
{
    cout << "Start!" << endl;
    OUTPUT = 1;
}

// Stop button function
void StopPressed(void)
{
    cout << "Stop!" << endl;
    OUTPUT = 0;
}

// Convert light sensor voltage to resistance
float getPhotoResistance(void)
{
    LightSensorDigiValue = LightSensor.read();
    LightSensorVoltValue = Vsupply * LightSensorDigiValue;
    LdrResistance = LightSensorVoltValue * LdrBiasResistor / (Vsupply - LightSensorVoltValue); 
    return LdrResistance;
}

// Check LDR sensor
void CheckLightSensor(void)
{
    if(getPhotoResistance() >= LightResistanceLimit) {
        cout << "LDR Start!" << endl;
        OUTPUT = 1;
    }
}

// Convert thermistor voltage to temperature
float getThermistorTemperature(void)
{
    TemperatureSensorDigiValue = TemperatureSensor.read();
    TemperatureSensorVoltValue = Vsupply * TemperatureSensorDigiValue;
    ThermistorResistance = (TemperatureSensorVoltValue * ThermistorBiasResistor) / (Vsupply - TemperatureSensorVoltValue);
    ThermistorTemperature = ((ThermistorResistance - 10000.0) / (-320.0)) + 25.0; // Approximate conversion
    return ThermistorTemperature;
}

// Check temperature sensor
void CheckTemperatureSensor(void)
{
    if(getThermistorTemperature() >= TemperatureLimit) {
        cout << "Temperature Limit Exceeded!" << endl;
        OUTPUT = 0;
    }
}

// Convert torque sensor voltage to current
float getMotorCurrent(void)
{
    MotorCurrentDigiValue = TorqueSensor.read();
    MotorCurrentVoltValue = Vsupply * MotorCurrentDigiValue;
    MotorCurrent = MotorCurrentVoltValue / MotorSeriesResistance;
    return MotorCurrent;
}

// Check torque sensor
void CheckTorqueSensor(void)
{
    if(getMotorCurrent() >= MotorCurrentLimit) {
        cout << "Over Torque Condition!" << endl;
        OUTPUT = 0;
    }
}

// Main function
int main(void)
{
    // Setup an event queue for ISR handling
    EventQueue event_queue;
    
    // Setup an event thread
    Thread event_thread(osPriorityNormal);
    
    // Start event loop
    event_thread.start(callback(&event_queue, &EventQueue::dispatch_forever));
    
    // Attach interrupts to buttons
    START_BUTTON.rise(event_queue.event(&StartPressed));
    STOP_BUTTON.rise(event_queue.event(&StopPressed));

    while(true) {
        // Check sensors
        CheckLightSensor();
        CheckTemperatureSensor();
        CheckTorqueSensor();

        // Print sensor values
        cout << "\n\rLDR Resistance: " << getPhotoResistance() << endl;
        cout << "\rCurrent Temperature: " << getThermistorTemperature() << "Â°C" << endl;
        cout << "\rMotor Current: " << getMotorCurrent() << " A" << endl;
        cout << "\rStart Button: " << START_BUTTON.read() << endl;
        cout << "\rStop Button: " << STOP_BUTTON.read() << endl;
        
        wait_us(1000000); // Wait 1 second
    }
}

